---
title: "arrow_taxiscratch"
editor: visual
---

```{r}
library(arrow)
library(dplyr)
library(ggplot2)
library(forcats)
library(lubridate)
library(tidyr)
library(readr)



path <- 'data/raw'
filenames <- list.files(path)

merged <- open_dataset(paste0(path, '/', filenames))

merged_credit <- merged %>%
  filter(payment_type == 1, total_amount > 0, !PULocationID %in% c(264, 265), !DOLocationID %in% c(264, 265)) %>%
  select(PULocationID, DOLocationID, VendorID,
         tip_amount, fare_amount, tolls_amount,
         improvement_surcharge, congestion_surcharge, extra,
         airport_fee, mta_tax, total_amount) %>%
  mutate(
    tip_pct_fare_only = (tip_amount / fare_amount) * 100,
    tip_pct_total = (tip_amount / (fare_amount +
                                     tolls_amount +
                                     improvement_surcharge +
                                     congestion_surcharge +
                                     extra + airport_fee + mta_tax)) * 100
  ) %>%
  filter(is.finite(tip_pct_fare_only), is.finite(tip_pct_total)) # Filter out infinite values


merged_credit_cmt <- merged_credit %>% filter(VendorID == 1)
merged_credit_ver <- merged_credit %>% filter(VendorID == 2)

mean_cmt_fare_only <- merged_credit_cmt %>% summarize(mean_fare = mean(tip_pct_fare_only, na.rm = TRUE)) %>% collect()
mean_cmt_total <- merged_credit_cmt %>% summarize(mean_total = mean(tip_pct_total, na.rm = TRUE)) %>% collect()

mean_ver_fare_only <- merged_credit_ver %>% summarize(mean_fare = mean(tip_pct_fare_only, na.rm = TRUE)) %>% collect()
mean_ver_total <- merged_credit_ver %>% summarize(mean_total = mean(tip_pct_total, na.rm = TRUE)) %>% collect()

print(mean_cmt_fare_only)
print(mean_cmt_total)
print(mean_ver_fare_only)
print(mean_ver_total)


# write the data to a parquet file
#write_parquet(merged_credit, "merged_credit_processed.parquet")
```

```{r}

taxi_zone_lookup <- read_csv("data/preprocess/taxi_zone_lookup.csv")



# summary table for chloropleth:
merged_credit <- merged %>%
  filter(payment_type == 1, total_amount > 0, !PULocationID %in% c(264, 265)) %>%
  select(PULocationID, DOLocationID, VendorID,
         tip_amount, fare_amount, tolls_amount,
         improvement_surcharge, congestion_surcharge, extra,
         airport_fee, mta_tax, total_amount) %>%
  mutate(
    tip_pct_fare_only = (tip_amount / fare_amount) * 100,
    tip_pct_total = (tip_amount / (fare_amount +
                                     tolls_amount +
                                     improvement_surcharge +
                                     congestion_surcharge +
                                     extra + airport_fee + mta_tax)) * 100) %>%
  filter(is.finite(tip_pct_fare_only), is.finite(tip_pct_total))




```

```{r}

# Convert summary_data to a data frame
merged_credit_reg <- merged_credit %>% collect()

merged_with_zones <- merged_credit_reg %>%
  left_join(taxi_zone_lookup, by = c("PULocationID" = "LocationID"))

manhattan_data <- merged_with_zones %>%
  filter(Borough == "Manhattan")

summary_data <- manhattan_data %>%
  group_by(Zone) %>%
  summarise(
    total_rides = n(),
    avg_tip_amount = mean(tip_amount, na.rm = TRUE),
    avg_tip_pct_total = mean(tip_pct_total, na.rm = TRUE))


head(summary_data, n=5)
```

```{r}

# now shape file stuff:


library(sf)
taxi_zones_shp = st_read('data/preprocess/taxi_zones/taxi_zones.shp',quiet=TRUE)

manhattan_zones_shp <- taxi_zones_shp %>%
  filter(borough == "Manhattan")

plot(st_geometry(manhattan_zones_shp))

```

```{r}

manhattan_zones_choropleth <- manhattan_zones_shp %>%
  left_join(summary_data, by = c("zone" = "Zone"))

manhattan_zones_choropleth <- manhattan_zones_choropleth %>%
  mutate(total_rides = replace_na(total_rides, 0))

ggplot(data = manhattan_zones_choropleth) +
  geom_sf(aes(fill = total_rides), color = "white") +
  scale_fill_viridis_c(option = "plasma", na.value = "grey50") +  # Adjust color scale
  labs(
    title = "Map of Total Rides by Manhattan Neighborhood",
    fill = "Total Rides"
  ) +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 90, hjust = 1))


```

```{r}
# making ridgeline:


library(ggridges)

DOmerged_with_zones <- merged_credit_reg %>%
  filter( !DOLocationID %in% c(264, 265)) %>%
  left_join(taxi_zone_lookup, by = c("DOLocationID" = "LocationID"))

sampled_data <- DOmerged_with_zones %>%
  mutate(Borough = ifelse(DOLocationID %in% c(1, 132, 138), "Airports", Borough)) %>%  
  sample_n(10000)  

ridgeline_data <- sampled_data %>%
  mutate(tip_pct_total = round(tip_pct_total, 0)) %>%  
  group_by(Borough, tip_pct_total) %>%
  summarise(Freq = n(), .groups = "drop")  


ggplot(ridgeline_data, aes(x = tip_pct_total, y = Borough, height = Freq, group = Borough, fill = Borough)) +
  geom_density_ridges(stat = "identity", scale = 0.9) +
  xlim(0,40) + 
  labs(
    x = "Tip Percentage",
    y = "Dropoff Borough",
    title = "Ridgeline Plot of Tip Percentages by Dropoff Borough"
  ) +
  theme_minimal()


```
