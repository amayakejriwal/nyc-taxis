[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "NYC Taxis",
    "section": "",
    "text": "1 Introduction\nThe NYC taxi and limousine commission collects trip record information for each taxi and for-hire vehicle trip completed by licensed drivers and vehicles. Our group is specifically interested in Taxi data; we hope to explore patterns in trip distances, fare pricing, and passenger counts, as well as how these metrics vary by time of day or across different neighborhoods. By examining trends over time, we also aim to identify any seasonal or long-term shifts in taxi usage. Ultimately, this analysis will not only provide insights into passenger travel behavior but also offer a better understanding of how taxis serve as a vital component of New York City’s transportation ecosystem.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "data.html",
    "href": "data.html",
    "title": "2  Data",
    "section": "",
    "text": "2.1 Description\nWe are using the New York City Taxi and Limousine Commission (TLC) trip record dataset. (Link to dataset) The dataset is collected by technology providers authorized under the Taxicab & Livery Passenger Enhancement Programs (TPEP/LPEP), then provided to the NYC TLC. Data is available from 2009 through present and includes pick-up and drop-off dates, times, and locations, trip distances, itemized fares, rate types, payment types, and driver-reported passenger counts. It is updated monthly with a two-month delay, with each file containing a month of data. For each month, there are yellow taxi, green taxi, for-hire vehicle, and high volume for-hire vehicle trip record files. The data comes in PARQUET format with 19 columns. The number of rows depends on the number of trips that month. We will download the monthly data directly from the NYC TLC website and combine it in R.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Data</span>"
    ]
  },
  {
    "objectID": "data.html#missing-value-analysis",
    "href": "data.html#missing-value-analysis",
    "title": "2  Data",
    "section": "2.2 Missing value analysis",
    "text": "2.2 Missing value analysis\nThe columns passenger_count, RatecodeID, store_and_fwd_flag, congestion_surcharge, and airport_fee are all missing values for the same 1,309,356 rows. These dates all occur between December 31, 2022 and December 31, 2023.\n\n\nCode\n# load packages\nlibrary(arrow)\n\n\n\nAttaching package: 'arrow'\n\n\nThe following object is masked from 'package:utils':\n\n    timestamp\n\n\nCode\nlibrary(ggplot2)\nlibrary(dplyr)\n\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\n\nCode\nlibrary(forcats)\nlibrary(lubridate)\n\n\n\nAttaching package: 'lubridate'\n\n\nThe following object is masked from 'package:arrow':\n\n    duration\n\n\nThe following objects are masked from 'package:base':\n\n    date, intersect, setdiff, union\n\n\n\n\nCode\n# read in data and merge\npath &lt;- 'data/raw'\nfilenames &lt;- list.files(path)\nmerged &lt;- read_parquet(paste0(path, '/', filenames[1]))\nfor (file in filenames[2:length(filenames)]) {\n  prq &lt;- read_parquet(paste0(path, '/', file))\n  colnames(prq) &lt;- colnames(merged) # this is just for discrepancies in capitalization of colnames\n  merged &lt;- rbind(merged, prq)\n}\n\n# check for missing values\nmissing_per_col &lt;- as.data.frame(colSums(is.na(merged)))\ncolnames(missing_per_col) &lt;- 'num_missing'\nmissing_per_col &lt;- missing_per_col |&gt; \n  mutate('col' = rownames(missing_per_col)) |&gt; \n  arrange(-num_missing)\nrownames(missing_per_col) &lt;- c() \n\n# print summary of missing values\nmissing_per_col\n\n\n   num_missing                   col\n1      1309356       passenger_count\n2      1309356            RatecodeID\n3      1309356    store_and_fwd_flag\n4      1309356  congestion_surcharge\n5      1309356           airport_fee\n6            0              VendorID\n7            0  tpep_pickup_datetime\n8            0 tpep_dropoff_datetime\n9            0         trip_distance\n10           0          PULocationID\n11           0          DOLocationID\n12           0          payment_type\n13           0           fare_amount\n14           0                 extra\n15           0               mta_tax\n16           0            tip_amount\n17           0          tolls_amount\n18           0 improvement_surcharge\n19           0          total_amount\n\n\nCode\n# examine if all missing in same rows\nna_rows &lt;- merged |&gt; \n  filter(is.na(RatecodeID))\n\n# get names of rows with missing values\nmissing_cols &lt;- (missing_per_col |&gt; \n  filter(num_missing &gt; 0))$col\n\n# confirm that all columns with missing data are missing for same rows\nna_rows |&gt; \n  select(all_of(missing_cols)) |&gt; \n  is.na() |&gt; \n  colSums()\n\n\n     passenger_count           RatecodeID   store_and_fwd_flag \n             1309356              1309356              1309356 \ncongestion_surcharge          airport_fee \n             1309356              1309356 \n\n\nCode\n# examine dates for missing rows\nrange(na_rows$tpep_pickup_datetime)\n\n\n[1] \"2022-12-31 19:00:00 EST\" \"2023-12-31 18:58:47 EST\"\n\n\nCode\nunique(format(as.POSIXct(na_rows$tpep_pickup_datetime), format = \"%Y-%m-%d\"))\n\n\n  [1] \"2022-12-31\" \"2023-01-01\" \"2023-01-02\" \"2023-01-03\" \"2023-01-04\"\n  [6] \"2023-01-05\" \"2023-01-06\" \"2023-01-07\" \"2023-01-08\" \"2023-01-09\"\n [11] \"2023-01-10\" \"2023-01-11\" \"2023-01-12\" \"2023-01-13\" \"2023-01-14\"\n [16] \"2023-01-15\" \"2023-01-16\" \"2023-01-17\" \"2023-01-18\" \"2023-01-19\"\n [21] \"2023-01-20\" \"2023-01-21\" \"2023-01-22\" \"2023-01-23\" \"2023-01-24\"\n [26] \"2023-01-25\" \"2023-01-26\" \"2023-01-27\" \"2023-01-28\" \"2023-01-29\"\n [31] \"2023-01-30\" \"2023-01-31\" \"2023-02-01\" \"2023-02-02\" \"2023-02-03\"\n [36] \"2023-02-04\" \"2023-02-05\" \"2023-02-06\" \"2023-02-07\" \"2023-02-08\"\n [41] \"2023-02-09\" \"2023-02-10\" \"2023-02-11\" \"2023-02-12\" \"2023-02-13\"\n [46] \"2023-02-14\" \"2023-02-15\" \"2023-02-16\" \"2023-02-17\" \"2023-02-18\"\n [51] \"2023-02-19\" \"2023-02-20\" \"2023-02-21\" \"2023-02-22\" \"2023-02-23\"\n [56] \"2023-02-24\" \"2023-02-25\" \"2023-02-26\" \"2023-02-27\" \"2023-02-28\"\n [61] \"2023-03-01\" \"2023-03-02\" \"2023-03-03\" \"2023-03-04\" \"2023-03-05\"\n [66] \"2023-03-06\" \"2023-03-07\" \"2023-03-08\" \"2023-03-09\" \"2023-03-10\"\n [71] \"2023-03-11\" \"2023-03-12\" \"2023-03-13\" \"2023-03-14\" \"2023-03-15\"\n [76] \"2023-03-16\" \"2023-03-17\" \"2023-03-18\" \"2023-03-19\" \"2023-03-20\"\n [81] \"2023-03-21\" \"2023-03-22\" \"2023-03-23\" \"2023-03-24\" \"2023-03-25\"\n [86] \"2023-03-26\" \"2023-03-27\" \"2023-03-28\" \"2023-03-29\" \"2023-03-30\"\n [91] \"2023-03-31\" \"2023-04-01\" \"2023-04-02\" \"2023-04-03\" \"2023-04-04\"\n [96] \"2023-04-05\" \"2023-04-06\" \"2023-04-07\" \"2023-04-08\" \"2023-04-09\"\n[101] \"2023-04-10\" \"2023-04-11\" \"2023-04-12\" \"2023-04-13\" \"2023-04-14\"\n[106] \"2023-04-15\" \"2023-04-16\" \"2023-04-17\" \"2023-04-18\" \"2023-04-19\"\n[111] \"2023-04-20\" \"2023-04-21\" \"2023-04-22\" \"2023-04-23\" \"2023-04-24\"\n[116] \"2023-04-25\" \"2023-04-26\" \"2023-04-27\" \"2023-04-28\" \"2023-04-29\"\n[121] \"2023-04-30\" \"2023-05-01\" \"2023-05-02\" \"2023-05-03\" \"2023-05-04\"\n[126] \"2023-05-05\" \"2023-05-06\" \"2023-05-07\" \"2023-05-08\" \"2023-05-09\"\n[131] \"2023-05-10\" \"2023-05-11\" \"2023-05-12\" \"2023-05-13\" \"2023-05-14\"\n[136] \"2023-05-15\" \"2023-05-16\" \"2023-05-17\" \"2023-05-18\" \"2023-05-19\"\n[141] \"2023-05-20\" \"2023-05-21\" \"2023-05-22\" \"2023-05-23\" \"2023-05-24\"\n[146] \"2023-05-25\" \"2023-05-26\" \"2023-05-27\" \"2023-05-28\" \"2023-05-29\"\n[151] \"2023-05-30\" \"2023-05-31\" \"2023-06-01\" \"2023-06-02\" \"2023-06-03\"\n[156] \"2023-06-04\" \"2023-06-05\" \"2023-06-06\" \"2023-06-07\" \"2023-06-08\"\n[161] \"2023-06-09\" \"2023-06-10\" \"2023-06-11\" \"2023-06-12\" \"2023-06-13\"\n[166] \"2023-06-14\" \"2023-06-15\" \"2023-06-16\" \"2023-06-17\" \"2023-06-18\"\n[171] \"2023-06-19\" \"2023-06-20\" \"2023-06-21\" \"2023-06-22\" \"2023-06-23\"\n[176] \"2023-06-24\" \"2023-06-25\" \"2023-06-26\" \"2023-06-27\" \"2023-06-28\"\n[181] \"2023-06-29\" \"2023-06-30\" \"2023-07-01\" \"2023-07-02\" \"2023-07-03\"\n[186] \"2023-07-04\" \"2023-07-05\" \"2023-07-06\" \"2023-07-07\" \"2023-07-08\"\n[191] \"2023-07-09\" \"2023-07-10\" \"2023-07-11\" \"2023-07-12\" \"2023-07-13\"\n[196] \"2023-07-14\" \"2023-07-15\" \"2023-07-16\" \"2023-07-17\" \"2023-07-18\"\n[201] \"2023-07-19\" \"2023-07-20\" \"2023-07-21\" \"2023-07-22\" \"2023-07-23\"\n[206] \"2023-07-24\" \"2023-07-25\" \"2023-07-26\" \"2023-07-27\" \"2023-07-28\"\n[211] \"2023-07-29\" \"2023-07-30\" \"2023-07-31\" \"2023-08-01\" \"2023-08-02\"\n[216] \"2023-08-03\" \"2023-08-04\" \"2023-08-05\" \"2023-08-06\" \"2023-08-07\"\n[221] \"2023-08-08\" \"2023-08-09\" \"2023-08-10\" \"2023-08-11\" \"2023-08-12\"\n[226] \"2023-08-13\" \"2023-08-14\" \"2023-08-15\" \"2023-08-16\" \"2023-08-17\"\n[231] \"2023-08-18\" \"2023-08-19\" \"2023-08-20\" \"2023-08-21\" \"2023-08-22\"\n[236] \"2023-08-23\" \"2023-08-24\" \"2023-08-25\" \"2023-08-26\" \"2023-08-27\"\n[241] \"2023-08-28\" \"2023-08-29\" \"2023-08-30\" \"2023-08-31\" \"2023-09-01\"\n[246] \"2023-09-02\" \"2023-09-03\" \"2023-09-04\" \"2023-09-05\" \"2023-09-06\"\n[251] \"2023-09-07\" \"2023-09-08\" \"2023-09-09\" \"2023-09-10\" \"2023-09-11\"\n[256] \"2023-09-12\" \"2023-09-13\" \"2023-09-14\" \"2023-09-15\" \"2023-09-16\"\n[261] \"2023-09-17\" \"2023-09-18\" \"2023-09-19\" \"2023-09-20\" \"2023-09-21\"\n[266] \"2023-09-22\" \"2023-09-23\" \"2023-09-24\" \"2023-09-25\" \"2023-09-26\"\n[271] \"2023-09-27\" \"2023-09-28\" \"2023-09-29\" \"2023-09-30\" \"2023-10-01\"\n[276] \"2023-10-02\" \"2023-10-03\" \"2023-10-04\" \"2023-10-05\" \"2023-10-06\"\n[281] \"2023-10-07\" \"2023-10-08\" \"2023-10-09\" \"2023-10-10\" \"2023-10-11\"\n[286] \"2023-10-12\" \"2023-10-13\" \"2023-10-14\" \"2023-10-15\" \"2023-10-16\"\n[291] \"2023-10-17\" \"2023-10-18\" \"2023-10-19\" \"2023-10-20\" \"2023-10-21\"\n[296] \"2023-10-22\" \"2023-10-23\" \"2023-10-24\" \"2023-10-25\" \"2023-10-26\"\n[301] \"2023-10-27\" \"2023-10-28\" \"2023-10-29\" \"2023-10-30\" \"2023-10-31\"\n[306] \"2023-11-01\" \"2023-11-02\" \"2023-11-03\" \"2023-11-04\" \"2023-11-05\"\n[311] \"2023-11-06\" \"2023-11-07\" \"2023-11-08\" \"2023-11-09\" \"2023-11-10\"\n[316] \"2023-11-11\" \"2023-11-12\" \"2023-11-13\" \"2023-11-14\" \"2023-11-15\"\n[321] \"2023-11-16\" \"2023-11-17\" \"2023-11-18\" \"2023-11-19\" \"2023-11-20\"\n[326] \"2023-11-21\" \"2023-11-22\" \"2023-11-23\" \"2023-11-24\" \"2023-11-25\"\n[331] \"2023-11-26\" \"2023-11-27\" \"2023-11-28\" \"2023-11-29\" \"2023-11-30\"\n[336] \"2023-12-01\" \"2023-12-02\" \"2023-12-03\" \"2023-12-04\" \"2023-12-05\"\n[341] \"2023-12-06\" \"2023-12-07\" \"2023-12-08\" \"2023-12-09\" \"2023-12-10\"\n[346] \"2023-12-11\" \"2023-12-12\" \"2023-12-13\" \"2023-12-14\" \"2023-12-15\"\n[351] \"2023-12-16\" \"2023-12-17\" \"2023-12-18\" \"2023-12-19\" \"2023-12-20\"\n[356] \"2023-12-21\" \"2023-12-22\" \"2023-12-23\" \"2023-12-24\" \"2023-12-25\"\n[361] \"2023-12-26\" \"2023-12-27\" \"2023-12-28\" \"2023-12-29\" \"2023-12-30\"\n[366] \"2023-12-31\"\n\n\n\n\nCode\n# graphs\n# plot histogram of missing values\nggplot(missing_per_col, aes(x = fct_inorder(as.factor(col)), y = num_missing)) +\n  geom_col(fill = 'cornflowerblue') +\n  labs(x = 'Column',\n       y = 'Number of missing values',\n       title = 'Missing Values by Column') +\n  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Data</span>"
    ]
  }
]