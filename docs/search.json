[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "NYC Taxis",
    "section": "",
    "text": "1 Introduction\nThe NYC taxi and limousine commission collects trip record information for each taxi and for-hire vehicle trip completed by licensed drivers and vehicles. Our group is specifically interested in Taxi data; we hope to explore patterns in trip distances, fare pricing, and passenger counts, as well as how these metrics vary by time of day or across different neighborhoods. By examining trends over time, we also aim to identify any seasonal or long-term shifts in taxi usage. Ultimately, this analysis will not only provide insights into passenger travel behavior but also offer a better understanding of how taxis serve as a vital component of New York City’s transportation ecosystem.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "data.html",
    "href": "data.html",
    "title": "2  Data",
    "section": "",
    "text": "2.1 Description\nWe are using the New York City Taxi and Limousine Commission (TLC) trip record dataset. (Link to dataset) The dataset is collected by technology providers authorized under the Taxicab & Livery Passenger Enhancement Programs (TPEP/LPEP), then provided to the NYC TLC. Data is available from 2009 through present and includes pick-up and drop-off dates, times, and locations, trip distances, itemized fares, rate types, payment types, and driver-reported passenger counts. It is updated monthly with a two-month delay, with each file containing a month of data. For each month, there are yellow taxi, green taxi, for-hire vehicle, and high volume for-hire vehicle trip record files. The data comes in PARQUET format with 19 columns. The number of rows depends on the number of trips that month. We will download the monthly data directly from the NYC TLC website and combine it in R.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Data</span>"
    ]
  },
  {
    "objectID": "data.html#missing-value-analysis",
    "href": "data.html#missing-value-analysis",
    "title": "2  Data",
    "section": "2.2 Missing value analysis",
    "text": "2.2 Missing value analysis\nThe columns passenger_count, RatecodeID, store_and_fwd_flag, congestion_surcharge, and airport_fee are all missing values for the same 1,309,356 rows. These dates all occur between December 31, 2022 and December 31, 2023.\n\n\nCode\n# read in data and merge\npath &lt;- 'data/raw'\nfilenames &lt;- list.files(path)\nmerged &lt;- read_parquet(paste0(path, '/', filenames[1]))\nfor (file in filenames[2:length(filenames)]) {\n  prq &lt;- read_parquet(paste0(path, '/', file))\n  colnames(prq) &lt;- colnames(merged) # this is just for discrepancies in capitalization of colnames\n  merged &lt;- rbind(merged, prq)\n}\n\n\n\n\nCode\n# check for missing values\nmissing_per_col &lt;- as.data.frame(colSums(is.na(merged)))\ncolnames(missing_per_col) &lt;- 'num_missing'\nmissing_per_col &lt;- missing_per_col |&gt; \n  mutate('col' = rownames(missing_per_col)) |&gt; \n  arrange(-num_missing)\nrownames(missing_per_col) &lt;- c() \n\n# examine if all missing in same rows\nna_rows &lt;- merged |&gt; \n  filter(is.na(RatecodeID))\n\n# get names of rows with missing values\nmissing_cols &lt;- (missing_per_col |&gt; \n  filter(num_missing &gt; 0))$col\n\n\n\n\nCode\n# graphs\n# plot histogram of missing values\nggplot(missing_per_col, aes(x = fct_inorder(as.factor(col)), y = num_missing)) +\n  geom_col(fill = 'cornflowerblue') +\n  labs(x = 'Column',\n       y = 'Number of missing values',\n       title = 'Missing Values by Column') +\n  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))\n\n\n\n\n\n\n\n\n\nThis Missingness Correlation Matrix visualizes how the missing values in different columns are related. Each tile represents the correlation between the missingness of two features, with the diagonal always being 1 (a column perfectly correlates with itself). In our data, most tiles are gray which indicates weak or no correlation between missingness in most features. White tiles suggest that correlations could not be calculated (likely due to insufficient overlap). This implies that missing values in the dataset are largely independent across features, with no strong patterns of systematic missingness.\n\n\nCode\n# create a logical matrix of missingness\nmissing_matrix &lt;- is.na(merged)\n\n# calculate correlations between missingness\nmissing_corr &lt;- cor(missing_matrix, use = \"pairwise.complete.obs\")\n\n\nWarning in cor(missing_matrix, use = \"pairwise.complete.obs\"): the standard\ndeviation is zero\n\n\nCode\n# convert to a data frame for visualization\nmissing_corr_df &lt;- as.data.frame(as.table(missing_corr))\ncolnames(missing_corr_df) &lt;- c(\"Column1\", \"Column2\", \"Correlation\")\n\n# plot correlation heatmap\nggplot(missing_corr_df, aes(x = Column1, y = Column2, fill = Correlation)) +\n  geom_tile(color = \"white\") +\n  scale_fill_gradient2(low = \"blue\", high = \"red\", mid = \"white\", midpoint = 0, name = \"Correlation\") +\n  labs(title = \"Missingness Correlation Matrix\", x = \"Column\", y = \"Column\") +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1),\n        axis.text.y = element_text(angle = 45, vjust = 1, hjust = 1))",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Data</span>"
    ]
  }
]