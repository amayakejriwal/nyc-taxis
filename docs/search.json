[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "NYC Taxis",
    "section": "",
    "text": "1 Introduction\nThe NYC taxi and limousine commission collects trip record information for each taxi and for-hire vehicle trip completed by licensed drivers and vehicles. Our group is specifically interested in Taxi data; we hope to explore patterns in trip distances, fare pricing, and passenger counts, as well as how these metrics vary by time of day or across different neighborhoods. By examining trends over time, we also aim to identify any seasonal or long-term shifts in taxi usage. Ultimately, this analysis will not only provide insights into passenger travel behavior but also offer a better understanding of how taxis serve as a vital component of New York City’s transportation ecosystem.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "data.html",
    "href": "data.html",
    "title": "2  Data",
    "section": "",
    "text": "2.1 Description\nWe are using the New York City Taxi and Limousine Commission (TLC) trip record dataset. (Link to dataset) The dataset is collected by technology providers authorized under the Taxicab & Livery Passenger Enhancement Programs (TPEP/LPEP), then provided to the NYC TLC. Data is available from 2009 through present and includes pick-up and drop-off dates, times, and locations, trip distances, itemized fares, rate types, payment types, and driver-reported passenger counts. It is updated monthly with a two-month delay, with each file containing a month of data. For each month, there are yellow taxi, green taxi, for-hire vehicle, and high volume for-hire vehicle trip record files. The data comes in PARQUET format with 19 columns. The number of rows depends on the number of trips that month. We will download the monthly data directly from the NYC TLC website and combine it in R.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Data</span>"
    ]
  },
  {
    "objectID": "data.html#missing-value-analysis",
    "href": "data.html#missing-value-analysis",
    "title": "2  Data",
    "section": "2.2 Missing value analysis",
    "text": "2.2 Missing value analysis\nThe columns passenger_count, RatecodeID, store_and_fwd_flag, congestion_surcharge, and airport_fee are all missing values for the same 1,309,356 rows. These dates all occur between December 31, 2022 and December 31, 2023.\n\n\nCode\n# read in data and merge\npath &lt;- 'data/raw'\nfilenames &lt;- list.files(path)\nmerged &lt;- read_parquet(paste0(path, '/', filenames[1]))\nfor (file in filenames[2:length(filenames)]) {\n  prq &lt;- read_parquet(paste0(path, '/', file))\n  colnames(prq) &lt;- colnames(merged) # this is just for discrepancies in capitalization of colnames\n  merged &lt;- rbind(merged, prq)\n}\n\n\n\n\nCode\n# check for missing values\nmissing_per_col &lt;- as.data.frame(colSums(is.na(merged)))\ncolnames(missing_per_col) &lt;- 'num_missing'\nmissing_per_col &lt;- missing_per_col |&gt; \n  mutate('col' = rownames(missing_per_col)) |&gt; \n  arrange(-num_missing)\nrownames(missing_per_col) &lt;- c() \n\n# examine if all missing in same rows\nna_rows &lt;- merged |&gt; \n  filter(is.na(RatecodeID))\n\n# get names of rows with missing values\nmissing_cols &lt;- (missing_per_col |&gt; \n  filter(num_missing &gt; 0))$col\n\n\n\n\nCode\n# graphs\n# plot histogram of missing values\nggplot(missing_per_col, aes(x = fct_inorder(as.factor(col)), y = num_missing)) +\n  geom_col(fill = 'cornflowerblue') +\n  labs(x = 'Column',\n       y = 'Number of missing values',\n       title = 'Missing Values by Column') +\n  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))\n\n\n\n\n\n\n\n\n\nThis Missingness Correlation Matrix visualizes how the missing values in different columns are related. Each tile represents the correlation between the missingness of two features, with the diagonal always being 1 (a column perfectly correlates with itself). In our data, most tiles are gray which indicates weak or no correlation between missingness in most features. White tiles suggest that correlations could not be calculated (likely due to insufficient overlap). This implies that missing values in the dataset are largely independent across features, with no strong patterns of systematic missingness.\n\n\nCode\n# create a logical matrix of missingness\nmissing_matrix &lt;- is.na(merged)\n\n# calculate correlations between missingness\nmissing_corr &lt;- cor(missing_matrix, use = \"pairwise.complete.obs\")\n\n\nWarning in cor(missing_matrix, use = \"pairwise.complete.obs\"): the standard\ndeviation is zero\n\n\nCode\n# convert to a data frame for visualization\nmissing_corr_df &lt;- as.data.frame(as.table(missing_corr))\ncolnames(missing_corr_df) &lt;- c(\"Column1\", \"Column2\", \"Correlation\")\n\n# plot correlation heatmap\nggplot(missing_corr_df, aes(x = Column1, y = Column2, fill = Correlation)) +\n  geom_tile(color = \"white\") +\n  scale_fill_gradient2(low = \"blue\", high = \"red\", mid = \"white\", midpoint = 0, name = \"Correlation\") +\n  labs(title = \"Missingness Correlation Matrix\", x = \"Column\", y = \"Column\") +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1),\n        axis.text.y = element_text(angle = 45, vjust = 1, hjust = 1))",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Data</span>"
    ]
  },
  {
    "objectID": "results.html",
    "href": "results.html",
    "title": "3  Results",
    "section": "",
    "text": "3.1 Fare Amount by Trip Distance\nFor the following scatterplots we used a random subsample of the data due to the full dataset being too large (over 38 million rows). Upon plotting fare_amount by trip_distance we found that there were distinct patterns within the scatterplot. We used RatecodeID (the final rate code in effect at the end of the trip) and payment_type to illuminate these patterns.\nCode\n# preprocessing\nset.seed(123)\n\npath &lt;- 'data/raw'\nfilenames &lt;- list.files(path)\n\n# Use open_dataset to create a Dataset object\nmerged &lt;- open_dataset(paste0(path, '/', filenames))\nmerged &lt;- as.data.frame(merged)\n\n# look up table for locationIDs and boroughs\nzone_lookup &lt;- readr::read_csv('data/preprocess/taxi_zone_lookup.csv')\n\n\nRows: 265 Columns: 4\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (3): Borough, Zone, service_zone\ndbl (1): LocationID\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nCode\n# randomly sample data\nidx &lt;- sample(1:nrow(merged), nrow(merged)/1000, replace = FALSE)",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Results</span>"
    ]
  },
  {
    "objectID": "results.html#fare-amount-by-trip-distance",
    "href": "results.html#fare-amount-by-trip-distance",
    "title": "3  Results",
    "section": "",
    "text": "3.1.1 Fare Amount by Trip Distance and Rate Code\nIn general, there was a positive linear relationship between fare_amount and trip_distance. However, JFK alone had a mostly constant fare, regardless of distance. Additionally, some trips with the standard rate were negative and appeared to have a negative linear relationship between the two variables. Lastly, a number of rides with negotiated fares appear to have not gone anywhere (trip distance = 0).\n\n\nCode\n# add column for rate code ID label\nmerged_edit &lt;- merged |&gt; mutate(Ratecode_label = case_when(RatecodeID == 1 ~ \"Standard rate\",\n                                            RatecodeID == 2 ~ \"JFK\",\n                                            RatecodeID == 3 ~ \"Newark\",\n                                            RatecodeID == 4 ~ \"Nassau/Westchester\",\n                                            RatecodeID == 5 ~ \"Negotiated fare\",\n                                            RatecodeID == 6 ~ \"Group ride\",\n                                            RatecodeID == 99 | is.na(RatecodeID) ~ \"NA\"))\nmerged_edit$Ratecode_label &lt;- factor(merged_edit$Ratecode_label, \n                                        levels = c(\"Standard rate\", \"JFK\", \"Newark\", \"Nassau/Westchester\", \"Negotiated fare\", \"Group ride\", \"NA\"))\n\n# faceting on different variables\nggplot(merged_edit[idx, ] |&gt; filter(trip_distance &lt; 1000, Ratecode_label != \"NA\"), \n       aes(x = trip_distance, y = fare_amount)) +\n  geom_point(alpha = .5) +\n  facet_wrap(~as.factor(Ratecode_label)) +\n  labs(x = \"Trip Distance (mi)\",\n       y = \"Fare Amount ($)\",\n       title = \"Fare Amount vs. Trip Distance by Rate Code\")\n\n\n\n\n\n\n\n\n\n\n\n3.1.2 Negative Fares\nUsing the payment_type variable, we saw that the negative fares tended to result from instances where there was a dispute or no charge was made.\n\n\nCode\n# add column for payment type label\nmerged_edit &lt;- merged_edit |&gt; mutate(payment_type_label = case_when(payment_type == 0 ~ \"NA\",\n                                                                    payment_type == 1 ~ \"Credit card\",\n                                                                    payment_type == 2 ~ \"Cash\",\n                                                                    payment_type == 3 ~ \"No charge\",\n                                                                    payment_type == 4 ~ \"Dispute\",\n                                                                    payment_type == 5 ~ \"Unknown\"))\n\n# summarise by negative fare\nnegative_fares_payment_type &lt;- merged_edit |&gt; \n  mutate(negative_fare = ifelse(fare_amount &lt; 0, 1, 0)) |&gt; \n  group_by(payment_type_label) |&gt; \n  summarise(percent_negative = mean(negative_fare))\n\nnegative_fares_payment_type$payment_type_label &lt;- as.factor(negative_fares_payment_type$payment_type_label)\n\n# negative fares by payment type\nggplot(negative_fares_payment_type |&gt; \n         filter(payment_type_label != \"NA\"), \n       aes(x = fct_reorder(payment_type_label, -percent_negative), y = percent_negative)) +\n  geom_col(fill = \"cornflowerblue\") +\n  labs(x = \"Payment Type\",\n       y = \"Proportion of Negative Fares\",\n       title = \"Negative Fares by Payment Type\")",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Results</span>"
    ]
  },
  {
    "objectID": "results.html#pick-up-and-drop-off-locations",
    "href": "results.html#pick-up-and-drop-off-locations",
    "title": "3  Results",
    "section": "3.2 Pick Up and Drop Off Locations",
    "text": "3.2 Pick Up and Drop Off Locations\nUsing an alluvial diagram, we saw that the vast majority of rides were within Manhattan. A small fraction of rides starting in Manhattan ended outside of Manhattan, while about half the rides that started outside Manhattan ended in Manhattan. We broke this down further by borough using a grouped bar plot. After Manhattan, the most rides started and ended at airports, followed by Brooklyn. Interestingly, more rides started at the airports than ended there and more rides ended in Brooklyn and Queens than started there.\n\n\nCode\n# use look up table to get IDs in each borough\nAirport_locIDs &lt;- c(1, 132, 138)\nboroughs &lt;- zone_lookup$Borough |&gt; unique()\nfor (i in 1:length(boroughs)) {\n  b &lt;- boroughs[i]\n  if (b == \"N/A\" | b == \"Unknown\") {\n    next\n  }\n  if (b == \"Staten Island\") {\n    b &lt;- \"StatenIsland\"\n  }\n  assign(paste0(b, \"_locIDs\"), (zone_lookup |&gt; filter(Borough == b, !LocationID %in% Airport_locIDs))$LocationID)\n}\n\n# label pick up and drop off locations by borough\nmerged_edit &lt;- merged_edit |&gt; mutate(PUBorough = case_when(PULocationID %in% Airport_locIDs ~ \"Airport\",\n                                                           PULocationID %in% Queens_locIDs ~ \"Queens\",\n                                                           PULocationID %in% Bronx_locIDs ~ \"Bronx\",\n                                                           PULocationID %in% Manhattan_locIDs ~ \"Manhattan\",\n                                                           PULocationID %in% StatenIsland_locIDs ~ \"Staten Island\",\n                                                           PULocationID %in% Brooklyn_locIDs ~ \"Brooklyn\"))\n\nmerged_edit &lt;- merged_edit |&gt; mutate(DOBorough = case_when(DOLocationID %in% Airport_locIDs ~ \"Airport\",\n                                                           DOLocationID %in% Queens_locIDs ~ \"Queens\",\n                                                           DOLocationID %in% Bronx_locIDs ~ \"Bronx\",\n                                                           DOLocationID %in% Manhattan_locIDs ~ \"Manhattan\",\n                                                           DOLocationID %in% StatenIsland_locIDs ~ \"Staten Island\",\n                                                           DOLocationID %in% Brooklyn_locIDs ~ \"Brooklyn\"))\n\n\n\n\nCode\n# counts for each different pairing of pick up and drop off locations\nPU_DO_alluvial &lt;- merged_edit |&gt;\n  group_by(PUBorough, DOBorough) |&gt; \n  summarise(Freq = n())\n\n\n`summarise()` has grouped output by 'PUBorough'. You can override using the\n`.groups` argument.\n\n\nCode\n# label as Manhattan or not Manhattan\nPU_DO_alluvial_lumped &lt;- merged_edit |&gt; \n  mutate(PUManhattan = ifelse(PUBorough == \"Manhattan\", \"Manhattan\" , \"Non-Manhattan\")) |&gt; \n  mutate(DOManhattan = ifelse(DOBorough == \"Manhattan\", \"Manhattan\", \"Non-Manhattan\")) |&gt; \n  group_by(PUManhattan, DOManhattan) |&gt; \n  summarise(Freq = n())\n\n\n`summarise()` has grouped output by 'PUManhattan'. You can override using the\n`.groups` argument.\n\n\nCode\n# remove NAs\nPU_DO_alluvial_lumped &lt;- PU_DO_alluvial_lumped |&gt; \n  filter(PUManhattan != \"NA\", DOManhattan != \"NA\")\n\n# alluvial diagram of rides (Manhattan vs. non-Manhattan)\nggplot(PU_DO_alluvial_lumped, \n       aes(axis1 = fct_reorder(as.factor(PUManhattan), Freq, mean),\n           axis2 = DOManhattan,\n           y = Freq, \n           fill = DOManhattan)) +\n  geom_alluvium(alpha = .75) +\n  geom_stratum(fill = NA) +\n  geom_text(stat = \"stratum\", aes(label = after_stat(stratum))) +\n  scale_x_discrete(limits = c(\"Pick up location\", \"Drop off location\"), name = \"Axes\") +\n  labs(y = \"Number of Rides\",\n       title = \"Pick Up to Drop Off (Manhattan vs. Non-Manhattan)\") +\n  guides(fill = \"none\") +\n  scale_y_continuous(labels = scales::comma)\n\n\nWarning in to_lodes_form(data = data, axes = axis_ind, discern =\nparams$discern): Some strata appear at multiple axes.\nWarning in to_lodes_form(data = data, axes = axis_ind, discern =\nparams$discern): Some strata appear at multiple axes.\nWarning in to_lodes_form(data = data, axes = axis_ind, discern =\nparams$discern): Some strata appear at multiple axes.\n\n\n\n\n\n\n\n\n\n\n\nCode\n# reformatting counts by location for grouped bar plot\nPU_freq_loc &lt;- PU_DO_alluvial |&gt; \n  group_by(PUBorough) |&gt; \n  summarise(Freq = sum(Freq)) |&gt; \n  mutate(Type = \"Pick Up\")\ncolnames(PU_freq_loc) &lt;- c(\"Borough\", \"Freq\", \"Type\")\n\nDO_freq_loc &lt;- PU_DO_alluvial |&gt; \n  group_by(DOBorough) |&gt; \n  summarise(Freq = sum(Freq)) |&gt;\n  mutate(Type = \"Drop Off\")\ncolnames(DO_freq_loc) &lt;- c(\"Borough\", \"Freq\", \"Type\")\n\nPU_DO_freq &lt;- rbind(PU_freq_loc, DO_freq_loc) \n\n# ride frequency by pick up and drop off location\nggplot(PU_DO_freq |&gt; \n         filter(Borough != \"NA\"),\n       aes(x = fct_reorder(as.factor(Borough), -Freq),\n           y = Freq,\n           fill = factor(Type, levels = c(\"Pick Up\", \"Drop Off\")))) +\n  geom_col(position = \"dodge\") +\n  labs(x = \"Borough\",\n       y = \"Number of Rides\",\n       title = \"Number of Rides by Location\",\n       fill = \"Location Type\") +\n  scale_fill_manual(values = c(\"coral2\", \"coral4\")) +\n  scale_y_continuous(labels = scales::comma)\n\n\n\n\n\n\n\n\n\n\n\nCode\n# chloropleth \n\ntaxi_zone_lookup &lt;- read_csv(\"data/preprocess/taxi_zone_lookup.csv\")\n\n\nRows: 265 Columns: 4\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (3): Borough, Zone, service_zone\ndbl (1): LocationID\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nCode\npath &lt;- 'data/raw'\nfilenames &lt;- list.files(path)\n\nmerged &lt;- open_dataset(paste0(path, '/', filenames))\n\n# summary table for chloropleth:\n\nmerged_credit &lt;- merged %&gt;%\n  filter(payment_type == 1, total_amount &gt; 0, !PULocationID %in% c(264, 265)) %&gt;%\n  select(PULocationID, DOLocationID, VendorID,\n         tip_amount, fare_amount, tolls_amount,\n         improvement_surcharge, congestion_surcharge, extra,\n         airport_fee, mta_tax, total_amount) %&gt;%\n  mutate(\n    tip_pct_fare_only = (tip_amount / fare_amount) * 100,\n    tip_pct_total = (tip_amount / (fare_amount +\n                                     tolls_amount +\n                                     improvement_surcharge +\n                                     congestion_surcharge +\n                                     extra + airport_fee + mta_tax)) * 100) %&gt;%\n  filter(is.finite(tip_pct_fare_only), is.finite(tip_pct_total))\n\n# Convert summary_data to a data frame\nmerged_credit_reg &lt;- merged_credit %&gt;% collect()\n\nmerged_with_zones &lt;- merged_credit_reg %&gt;%\n  left_join(taxi_zone_lookup, by = c(\"PULocationID\" = \"LocationID\"))\n\nmanhattan_data &lt;- merged_with_zones %&gt;%\n  filter(Borough == \"Manhattan\")\n\nsummary_data &lt;- manhattan_data %&gt;%\n  group_by(Zone) %&gt;%\n  summarise(\n    total_rides = n(),\n    avg_tip_amount = mean(tip_amount, na.rm = TRUE),\n    avg_tip_pct_total = mean(tip_pct_total, na.rm = TRUE))\n\n\n# now shape file stuff:\n\ntaxi_zones_shp = st_read('data/preprocess/taxi_zones/taxi_zones.shp',quiet=TRUE)\n\nmanhattan_zones_shp &lt;- taxi_zones_shp %&gt;%\n  filter(borough == \"Manhattan\")\n\nmanhattan_zones_choropleth &lt;- manhattan_zones_shp %&gt;%\n  left_join(summary_data, by = c(\"zone\" = \"Zone\"))\n\nmanhattan_zones_choropleth &lt;- manhattan_zones_choropleth %&gt;%\n  mutate(total_rides = replace_na(total_rides, 0))\n\nggplot(data = manhattan_zones_choropleth) +\n  geom_sf(aes(fill = total_rides), color = \"white\") +\n  scale_fill_viridis_c(option = \"plasma\", na.value = \"grey50\") +  # Adjust color scale\n  labs(\n    title = \"Total Pick-ups by Manhattan Neighborhood\",\n    fill = \"Total Rides\"\n  ) +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 90, hjust = 1))\n\n\n\n\n\n\n\n\n\nWhile analyzing the location data, we noticed a “Service Zone” column in our location lookup table with values such as “Boro Zone” and “Yellow Zone.” After revisiting the NYC.gov page where we sourced our data, we discovered it listed additional data for green taxis. Although this data is not included in our analyses, green taxis, known as “Boro Taxis,” are part of a separate fleet that operates exclusively outside a large portion of Manhattan. These taxis were introduced to address the unequal access to legal taxi services, as 95% of traditional yellow taxis pick up riders south of 96th Street.\nTo explore whether this disparity persists in 2023, we created a choropleth plot to visualize yellow taxi ride pickups by Manhattan neighborhood. The plot reveals that ride pickups are still disproportionately concentrated south of 96th Street, with the Upper East Side having the most pickups.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Results</span>"
    ]
  },
  {
    "objectID": "results.html#ride-frequency-by-month",
    "href": "results.html#ride-frequency-by-month",
    "title": "3  Results",
    "section": "3.3 Ride Frequency by Month",
    "text": "3.3 Ride Frequency by Month\nThe most rides occurred in May and October. Generally, rides were highest in the spring and fall months, decreasing during winter and summer months. There are clear dips in both the bar plot and line plot during January-February and July-September.\n\n\nCode\n# add column for month\nmerged_edit &lt;- merged_edit |&gt; \n  mutate(PUMonth_num = month(as.POSIXct(tpep_pickup_datetime))) |&gt; \n  mutate(PUMonth = case_when(PUMonth_num == 1 ~ \"Jan\",\n                             PUMonth_num == 2 ~ \"Feb\",\n                             PUMonth_num == 3 ~ \"Mar\",\n                             PUMonth_num == 4 ~ \"Apr\",\n                             PUMonth_num == 5 ~ \"May\",\n                             PUMonth_num == 6 ~ \"Jun\",\n                             PUMonth_num == 7 ~ \"Jul\",\n                             PUMonth_num == 8 ~ \"Aug\",\n                             PUMonth_num == 9 ~ \"Sep\",\n                             PUMonth_num == 10 ~ \"Oct\",\n                             PUMonth_num == 11 ~ \"Nov\",\n                             PUMonth_num == 12 ~ \"Dec\"))\nmerged_edit$PUMonth &lt;- fct_reorder(as.factor(merged_edit$PUMonth), merged_edit$PUMonth_num, mean)\n\n# monthly rides\nmonthly_rides &lt;- merged_edit |&gt; \n  group_by(PUMonth) |&gt; \n  summarise(Freq = n())\n\n# pick up month vs. number of rides\nggplot(monthly_rides, aes(x = PUMonth, y = Freq)) +\n  geom_col(fill = \"chartreuse4\") +\n  labs(x = \"Month\",\n       y = \"Number of Rides\",\n       title = \"Total Rides per Month\") +\n  scale_y_continuous(labels = scales::comma)",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Results</span>"
    ]
  },
  {
    "objectID": "results.html#tipping",
    "href": "results.html#tipping",
    "title": "3  Results",
    "section": "3.4 Tipping",
    "text": "3.4 Tipping\n\n3.4.1 Distribution of Tip Amounts\nWe found that Manhattan tended to have the most outlying values. Queens and the Bronx had the widest spread of tipping percentages, with larger interquartile ranges and outliers. Overall, tip percentages are predominantly below 50%, with a significant concentration in the 10-20% range.\n\n\nCode\nmerged_edit2 &lt;- merged_edit |&gt; select(DOBorough, PUBorough, tip_amount, total_amount, trip_distance, PUMonth, fare_amount, payment_type)\n\ntips &lt;- merged_edit2 |&gt; \n  mutate(percent_tip = (tip_amount / total_amount) * 100) |&gt; \n  filter(\n    payment_type == 1,\n    fare_amount &gt; 0,\n    percent_tip &gt;= 0, \n    percent_tip &lt; 200, \n    !is.na(DOBorough), \n    DOBorough != \"NA\"\n  ) \n\ntips_sample &lt;- tips |&gt; \n  slice_sample(n = 10000)\n\nggplot(tips_sample, aes(x = DOBorough, y = percent_tip, fill = DOBorough)) +\n  geom_boxplot(outlier.shape = NA, alpha = 0.6) +\n  geom_jitter(aes(color = DOBorough), width = 0.2, alpha = 0.5, size = 1.5) + \n  labs(title = \"Tip Percentage by DOBorough (Sampled Data)\",\n  x = \"Drop-off Borough\",\n  y = \"Tip Percentage (%)\") +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n\n\n\n\n\n\n\n\n\nWe also recreated a graph from the following post: https://iquantny.tumblr.com/post/107245431809/how-software-in-half-of-nyc-cabs-generates-52\nLooking at observations for rides payed for with credit card (since tips for cash payments were not recorded), we saw that there were clear peaks for 0%, 20%, 25%, and 30% tips. These may correspond to the default options for tipping on credit card readers in taxis. This result was similar to what was found in the article.\n\n\nCode\n# cols to use for summing up total fare without tip\ntotal_charge_cols &lt;- c(\"fare_amount\", \"extra\", \"mta_tax\", \"tolls_amount\", \"improvement_surcharge\", \"congestion_surcharge\", \"airport_fee\")\n\n# credit cards only for tip, removing negative fares, and unknown/NA locations\nmerged_sub_tip &lt;- merged_edit |&gt; select(all_of(c(total_charge_cols, \"tip_amount\", \"payment_type\", \"payment_type_label\", \"PUBorough\",  \"DOBorough\"))) |&gt;\n  filter(payment_type_label == \"Credit card\",\n         fare_amount &gt; 0)\n\n# calculate tips\nmerged_sub_tip &lt;- merged_sub_tip |&gt;\n  mutate(tip_percentage = round(tip_amount/(fare_amount + extra + mta_tax + tolls_amount + improvement_surcharge + congestion_surcharge + airport_fee)*100, 0))\n\n# summarise by tip percent (integer values)\nmerged_tip_summarized &lt;- merged_sub_tip |&gt;\n  group_by(tip_percentage) |&gt;\n  summarise(Freq = n())\n\n# plot frequencies for each tip percent\nggplot(merged_tip_summarized |&gt; filter(tip_percentage &lt; 50), aes(x = tip_percentage, y = Freq)) +\n  geom_col() +\n  labs(x = \"Tip Percentage\",\n       y =  \"Number of Tippers\",\n       title = \"Distribution of Tip Percentages\")\n\n\n\n\n\n\n\n\n\n\n\n3.4.2 Tipping by Trip Distance and Location\nThe majority of trips cover shorter distances (less than 10 miles) and cluster around tip percentages between 10% and 20%, regardless of the borough. However, a few outliers show higher tip percentages exceeding 50%, especially for shorter trips. For longer trips (over 20 miles), tip percentages tend to stabilize or decrease. This suggests that tipping behavior is more variable for shorter trips but converges to a narrower range for longer trips. In addition, many riders tend to tip in standard percentages, such as 20%, as evidenced by the horizontal lines at these tipping levels across various trip distances.\n\n\nCode\ntips_sample &lt;- tips |&gt; \n  slice_sample(n = 10000) |&gt; \n  filter(trip_distance &lt; 500)\n\nggplot(tips_sample, aes(x = trip_distance, y = percent_tip, color = DOBorough)) +\n  geom_point(alpha = 0.5) +\n  labs(title = \"Tip Percentage vs. Trip Distance\",\n       x = \"Trip Distance (miles)\",\n       y = \"Tip Percentage (%)\") +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\nTipping percentages for most boroughs are concentrated between 10% and 15%, except for notable outliers like the Bronx which has variable average tipping percentages across different months. Seasonal trends are not strongly evident.\n\n\nCode\ntips_sample &lt;- tips |&gt; \n  filter(trip_distance &lt; 500) |&gt; \n  group_by(PUMonth) |&gt; \n  slice_sample(n = 700) |&gt;\n  ungroup()\n\naverage_tips &lt;- tips_sample |&gt; \n  group_by(PUMonth, DOBorough) |&gt; \n  summarize(avg_tip_percent = mean(percent_tip, na.rm = TRUE), .groups = \"drop\")\n\nggplot(average_tips, aes(x = PUMonth, y = avg_tip_percent, color = DOBorough, group = DOBorough)) +\n  geom_line(size = 1) +\n  geom_point() +\n  labs(title = \"Average Tip Percentage by Month and Borough\",\n       x = \"Month\",\n       y = \"Average Tip Percentage (%)\",\n       color = \"Drop-off Borough\") +\n  scale_x_discrete(limits = c(\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\")) +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Results</span>"
    ]
  },
  {
    "objectID": "conclusion.html",
    "href": "conclusion.html",
    "title": "5  Conclusion",
    "section": "",
    "text": "After exploring various relationships between fare amount, tip amount, trip distance, payment type, pick up and drop off locations, and month from the 2023 NYC taxi data, there were several main takeaways. The majority of rides started and ended in Manhattan and fare increased linearly with trip distance except for in cases where there was a dispute or nothing was charged. The most trips occurred in May and October and the fewest occurred in July through September. When examining patterns in tip amount, we found that tips tended to fall between 10-20%, although there were peaks at 0%, 20%, 25%, and 30%, and there were no clear seasonal patterns evident. A main limitation was the size of the data files. While there was data available from other years, we were only able to use data from 2023 because of this. Additionally, since there were still over 38 million rows of data, we had to subsample for certain graphs to prevent overplotting. Other limitations include over 1 million missing values in 5 columns, which we handled by filtering out NA values. In the future, examining changes in the variables over the years would be an interesting avenue to explore, especially when considering the appearance of apps such as Uber and Lyft. For instance, how have these competitors affected fare amounts and ride frequency? Other questions to explore might relate to ride frequency and tip amount at different times of day. Additionally, merging this dataset with others (i.e., seasonal temperature or precipitation data, sports events or concert occurrences) could provide another angle on the patterns we observed. Overall, we learned that even within just one year of data, there were many spatial and temporal patterns to examine, and different visualizations highlighted new aspects of these patterns.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Conclusion</span>"
    ]
  }
]