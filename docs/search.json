[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "NYC Taxis",
    "section": "",
    "text": "1 Introduction\nThe NYC taxi and limousine commission collects trip record information for each taxi and for-hire vehicle trip completed by licensed drivers and vehicles. Our group is specifically interested in Taxi data; we hope to explore patterns in trip distances, fare pricing, and passenger counts, as well as how these metrics vary by time of day or across different neighborhoods. By examining trends over time, we also aim to identify any seasonal or long-term shifts in taxi usage. Ultimately, this analysis will not only provide insights into passenger travel behavior but also offer a better understanding of how taxis serve as a vital component of New York City’s transportation ecosystem.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "data.html",
    "href": "data.html",
    "title": "2  Data",
    "section": "",
    "text": "2.1 Description\nWe are using the New York City Taxi and Limousine Commission (TLC) trip record dataset. (Link to dataset) The dataset is collected by technology providers authorized under the Taxicab & Livery Passenger Enhancement Programs (TPEP/LPEP), then provided to the NYC TLC. Data is available from 2009 through present and includes pick-up and drop-off dates, times, and locations, trip distances, itemized fares, rate types, payment types, and driver-reported passenger counts. It is updated monthly with a two-month delay, with each file containing a month of data. For each month, there are yellow taxi, green taxi, for-hire vehicle, and high volume for-hire vehicle trip record files. The data comes in PARQUET format with 19 columns. The number of rows depends on the number of trips that month. We will download the monthly data directly from the NYC TLC website and combine it in R.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Data</span>"
    ]
  },
  {
    "objectID": "data.html#missing-value-analysis",
    "href": "data.html#missing-value-analysis",
    "title": "2  Data",
    "section": "2.2 Missing value analysis",
    "text": "2.2 Missing value analysis\nThe columns passenger_count, RatecodeID, store_and_fwd_flag, congestion_surcharge, and airport_fee are all missing values for the same 1,309,356 rows. These dates all occur between December 31, 2022 and December 31, 2023.\n\n\nCode\n# read in data and merge\npath &lt;- 'data/raw'\nfilenames &lt;- list.files(path)\nmerged &lt;- read_parquet(paste0(path, '/', filenames[1]))\nfor (file in filenames[2:length(filenames)]) {\n  prq &lt;- read_parquet(paste0(path, '/', file))\n  colnames(prq) &lt;- colnames(merged) # this is just for discrepancies in capitalization of colnames\n  merged &lt;- rbind(merged, prq)\n}\n\n\n\n\nCode\n# check for missing values\nmissing_per_col &lt;- as.data.frame(colSums(is.na(merged)))\ncolnames(missing_per_col) &lt;- 'num_missing'\nmissing_per_col &lt;- missing_per_col |&gt; \n  mutate('col' = rownames(missing_per_col)) |&gt; \n  arrange(-num_missing)\nrownames(missing_per_col) &lt;- c() \n\n# examine if all missing in same rows\nna_rows &lt;- merged |&gt; \n  filter(is.na(RatecodeID))\n\n# get names of rows with missing values\nmissing_cols &lt;- (missing_per_col |&gt; \n  filter(num_missing &gt; 0))$col\n\n\n\n\nCode\n# graphs\n# plot histogram of missing values\nggplot(missing_per_col, aes(x = fct_inorder(as.factor(col)), y = num_missing)) +\n  geom_col(fill = 'cornflowerblue') +\n  labs(x = 'Column',\n       y = 'Number of missing values',\n       title = 'Missing Values by Column') +\n  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))\n\n\n\n\n\n\n\n\n\nThis Missingness Correlation Matrix visualizes how the missing values in different columns are related. Each tile represents the correlation between the missingness of two features, with the diagonal always being 1 (a column perfectly correlates with itself). In our data, most tiles are gray which indicates weak or no correlation between missingness in most features. White tiles suggest that correlations could not be calculated (likely due to insufficient overlap). This implies that missing values in the dataset are largely independent across features, with no strong patterns of systematic missingness.\n\n\nCode\n# create a logical matrix of missingness\nmissing_matrix &lt;- is.na(merged)\n\n# calculate correlations between missingness\nmissing_corr &lt;- cor(missing_matrix, use = \"pairwise.complete.obs\")\n\n\nWarning in cor(missing_matrix, use = \"pairwise.complete.obs\"): the standard\ndeviation is zero\n\n\nCode\n# convert to a data frame for visualization\nmissing_corr_df &lt;- as.data.frame(as.table(missing_corr))\ncolnames(missing_corr_df) &lt;- c(\"Column1\", \"Column2\", \"Correlation\")\n\n# plot correlation heatmap\nggplot(missing_corr_df, aes(x = Column1, y = Column2, fill = Correlation)) +\n  geom_tile(color = \"white\") +\n  scale_fill_gradient2(low = \"blue\", high = \"red\", mid = \"white\", midpoint = 0, name = \"Correlation\") +\n  labs(title = \"Missingness Correlation Matrix\", x = \"Column\", y = \"Column\") +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1),\n        axis.text.y = element_text(angle = 45, vjust = 1, hjust = 1))",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Data</span>"
    ]
  },
  {
    "objectID": "results.html",
    "href": "results.html",
    "title": "3  Results",
    "section": "",
    "text": "3.1 1. Fare Amount by Trip Distance\nFor the following scatterplots we used a random subsample of the data due to the full dataset being too large (over 38 million rows). Upon plotting fare_amount by trip_distance we found that there were distinct patterns within the scatterplot. We used RatecodeID (the final rate code in effect at the end of the trip) and payment_type to illuminate these patterns.\nCode\n# preprocessing\n\n# load packages\nlibrary(arrow)\n\n\n\nAttaching package: 'arrow'\n\n\nThe following object is masked from 'package:utils':\n\n    timestamp\n\n\nCode\nlibrary(ggplot2)\nlibrary(dplyr)\n\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\n\nCode\nlibrary(forcats)\nlibrary(lubridate)\n\n\n\nAttaching package: 'lubridate'\n\n\nThe following object is masked from 'package:arrow':\n\n    duration\n\n\nThe following objects are masked from 'package:base':\n\n    date, intersect, setdiff, union\n\n\nCode\nlibrary(ggalluvial)\n\n# merging data (file was too big to store on github)\n# path &lt;- 'data/raw'\n# filenames &lt;- list.files(path)\n# merged &lt;- read_parquet(paste0(path, '/', filenames[1]))\n# for (file in filenames[2:length(filenames)]) {\n#   prq &lt;- read_parquet(paste0(path, '/', file))\n#   colnames(prq) &lt;- colnames(merged) # this is just for discrepancies in capitalization of colnames\n#   merged &lt;- rbind(merged, prq)\n# }\n\npath &lt;- 'data/raw'\nfilenames &lt;- list.files(path)\n\n# Use open_dataset to create a Dataset object\nmerged &lt;- open_dataset(paste0(path, '/', filenames))\nmerged &lt;- as.data.frame(merged)\n\n# look up table for locationIDs and boroughs\nzone_lookup &lt;- readr::read_csv('data/preprocess/taxi_zone_lookup.csv')\n\n\nRows: 265 Columns: 4\n\n\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (3): Borough, Zone, service_zone\ndbl (1): LocationID\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nCode\n# randomly sample data\nidx &lt;- sample(1:nrow(merged), nrow(merged)/1000, replace = FALSE)",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Results</span>"
    ]
  },
  {
    "objectID": "results.html#a.-fare-amount-by-trip-distance-and-rate-code",
    "href": "results.html#a.-fare-amount-by-trip-distance-and-rate-code",
    "title": "3  Results",
    "section": "3.2 1a. Fare Amount by Trip Distance and Rate Code",
    "text": "3.2 1a. Fare Amount by Trip Distance and Rate Code\nIn general, there was a positive linear relationship between fare_amount and trip_distance. However, JFK alone had a mostly constant fare, regardless of distance. Additionally, some trips with the standard rate were negative and appeared to have a negative linear relationship between the two variables. Lastly, a number of rides with negotiated fares appear to have not gone anywhere (trip distance = 0).\n\n\nCode\n# add column for rate code ID label\nmerged_edit &lt;- merged |&gt; mutate(Ratecode_label = case_when(RatecodeID == 1 ~ \"Standard rate\",\n                                            RatecodeID == 2 ~ \"JFK\",\n                                            RatecodeID == 3 ~ \"Newark\",\n                                            RatecodeID == 4 ~ \"Nassau/Westchester\",\n                                            RatecodeID == 5 ~ \"Negotiated fare\",\n                                            RatecodeID == 6 ~ \"Group ride\",\n                                            RatecodeID == 99 | is.na(RatecodeID) ~ \"NA\"))\nmerged_edit$Ratecode_label &lt;- factor(merged_edit$Ratecode_label, \n                                        levels = c(\"Standard rate\", \"JFK\", \"Newark\", \"Nassau/Westchester\", \"Negotiated fare\", \"Group ride\", \"NA\"))\n\n# faceting on different variables\nggplot(merged_edit[idx, ] |&gt; filter(trip_distance &lt; 1000, Ratecode_label != \"NA\"), \n       aes(x = trip_distance, y = fare_amount)) +\n  geom_point(alpha = .5) +\n  facet_wrap(~as.factor(Ratecode_label)) +\n  labs(x = \"Trip Distance (mi)\",\n       y = \"Fare Amount ($)\",\n       title = \"Fare Amount vs. Trip Distance by Rate Code\")",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Results</span>"
    ]
  },
  {
    "objectID": "results.html#b.-negative-fares",
    "href": "results.html#b.-negative-fares",
    "title": "3  Results",
    "section": "3.3 1b. Negative Fares",
    "text": "3.3 1b. Negative Fares\nUsing the payment_type variable, we saw that the negative fares tended to result from instances where there was a dispute or no charge was made.\n\n\nCode\n# add column for payment type label\nmerged_edit &lt;- merged_edit |&gt; mutate(payment_type_label = case_when(payment_type == 0 ~ \"NA\",\n                                                                    payment_type == 1 ~ \"Credit card\",\n                                                                    payment_type == 2 ~ \"Cash\",\n                                                                    payment_type == 3 ~ \"No charge\",\n                                                                    payment_type == 4 ~ \"Dispute\",\n                                                                    payment_type == 5 ~ \"Unknown\"))\n\n# summarise by negative fare\nnegative_fares_payment_type &lt;- merged_edit |&gt; \n  mutate(negative_fare = ifelse(fare_amount &lt; 0, 1, 0)) |&gt; \n  group_by(payment_type_label) |&gt; \n  summarise(percent_negative = mean(negative_fare))\n\nnegative_fares_payment_type$payment_type_label &lt;- as.factor(negative_fares_payment_type$payment_type_label)\n\n# negative fares by payment type\nggplot(negative_fares_payment_type |&gt; \n         filter(payment_type_label != \"NA\"), \n       aes(x = fct_reorder(payment_type_label, -percent_negative), y = percent_negative)) +\n  geom_col(fill = \"cornflowerblue\") +\n  labs(x = \"Payment Type\",\n       y = \"Proportion of Negative Fares\",\n       title = \"Negative Fares by Payment Type\")",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Results</span>"
    ]
  },
  {
    "objectID": "results.html#ride-frequency-by-month",
    "href": "results.html#ride-frequency-by-month",
    "title": "3  Results",
    "section": "4.1 3. Ride Frequency by Month",
    "text": "4.1 3. Ride Frequency by Month\nThe most rides occurred in May and October. Generally, rides were highest in the spring and fall months, decreasing during winter and summer months. There are clear dips in both the bar plot and line plot during January-February and July-September.\n\n\nCode\n# add column for month\nmerged_edit &lt;- merged_edit |&gt; \n  mutate(PUMonth_num = month(as.POSIXct(tpep_pickup_datetime))) |&gt; \n  mutate(PUMonth = case_when(PUMonth_num == 1 ~ \"Jan\",\n                             PUMonth_num == 2 ~ \"Feb\",\n                             PUMonth_num == 3 ~ \"Mar\",\n                             PUMonth_num == 4 ~ \"Apr\",\n                             PUMonth_num == 5 ~ \"May\",\n                             PUMonth_num == 6 ~ \"Jun\",\n                             PUMonth_num == 7 ~ \"Jul\",\n                             PUMonth_num == 8 ~ \"Aug\",\n                             PUMonth_num == 9 ~ \"Sep\",\n                             PUMonth_num == 10 ~ \"Oct\",\n                             PUMonth_num == 11 ~ \"Nov\",\n                             PUMonth_num == 12 ~ \"Dec\"))\nmerged_edit$PUMonth &lt;- fct_reorder(as.factor(merged_edit$PUMonth), merged_edit$PUMonth_num, mean)\n\n# monthly rides\nmonthly_rides &lt;- merged_edit |&gt; \n  group_by(PUMonth) |&gt; \n  summarise(Freq = n())\n\nmonthly_rides_PU &lt;- merged_edit |&gt; \n  group_by(PUMonth, PUBorough) |&gt; \n  summarise(Freq = n())\n\n\n`summarise()` has grouped output by 'PUMonth'. You can override using the\n`.groups` argument.\n\n\nCode\nmonthly_rides_DO &lt;- merged_edit |&gt; \n  group_by(PUMonth, DOBorough) |&gt; \n  summarise(Freq = n())\n\n\n`summarise()` has grouped output by 'PUMonth'. You can override using the\n`.groups` argument.\n\n\nCode\n# pick up month vs. number of rides\nggplot(monthly_rides, aes(x = PUMonth, y = Freq)) +\n  geom_col(fill = \"chartreuse4\") +\n  labs(x = \"Month\",\n       y = \"Number of Rides\",\n       title = \"Total Rides per Month\")\n\n\n\n\n\n\n\n\n\nCode\nggplot(monthly_rides, aes(x = PUMonth, y = Freq, group = 1)) +\n  geom_point(color = \"chartreuse4\") +\n  geom_line(color = \"chartreuse4\") +\n  labs(x = \"Month\",\n       y = \"Number of Rides\",\n       title = \"Total Rides per Month\")\n\n\n\n\n\n\n\n\n\nCode\n# by pickup\nggplot(monthly_rides_PU |&gt; filter(PUBorough != \"NA\"), \n       aes(x = PUMonth, y = Freq, color = PUBorough)) +\n  geom_point() +\n  geom_line(aes(group = PUBorough)) +\n  labs(x = \"Month\",\n       y = \"Log Number of Rides\",\n       title = \"Rides per Month by Pick Up Location\",\n       color = \"Pick Up Location\") +\n  scale_y_log10()\n\n\n\n\n\n\n\n\n\nCode\n# by drop off\nggplot(monthly_rides_DO |&gt; filter(DOBorough != \"NA\"), \n       aes(x = PUMonth, y = Freq, color = DOBorough)) +\n  geom_point() +\n  geom_line(aes(group = DOBorough)) +\n  labs(x = \"Month\",\n       y = \"Log Number of Rides\",\n       title = \"Rides per Month by Drop Off Location\",\n       fill = \"Drop Off Location\") +\n  scale_y_log10()",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Results</span>"
    ]
  },
  {
    "objectID": "results.html#tipping",
    "href": "results.html#tipping",
    "title": "3  Results",
    "section": "4.2 4. Tipping",
    "text": "4.2 4. Tipping\nWe found that Manhattan generally has a narrower spread of tip percentages, with a relatively high median, suggesting more consistent tipping behavior, though it also contains many outliers representing very high tipping percentages. Other boroughs, such as Queens and Brooklyn, show wider variability, with larger interquartile ranges and outliers, indicating less predictable tipping practices. Overall, tip percentages are predominantly below 50%, with a significant concentration in the 10-20% range.\n\n\nCode\nmerged_edit2 &lt;- merged_edit |&gt; select(DOBorough, PUBorough, tip_amount, total_amount, trip_distance, PUMonth)\n\ntips &lt;- merged_edit2 |&gt; \n  mutate(percent_tip = (tip_amount / total_amount) * 100) |&gt; \n  filter(\n    percent_tip &gt;= 0, \n    percent_tip &lt; 200, \n    !is.na(DOBorough), \n    DOBorough != \"NA\"\n  ) \n\ntips_sample &lt;- tips |&gt; \n  slice_sample(n = 10000)\n\nggplot(tips_sample, aes(x = DOBorough, y = percent_tip, fill = DOBorough)) +\n  geom_boxplot(outlier.shape = NA, alpha = 0.6) +\n  geom_jitter(aes(color = DOBorough), width = 0.2, alpha = 0.5, size = 1.5) + \n  labs(title = \"Tip Percentage by DOBorough (Sampled Data)\",\n       x = \"Drop-off Borough\",\n       y = \"Tip Percentage (%)\") +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n\n\n\n\n\n\n\n\n\n\n\nCode\ntips_sample &lt;- tips |&gt; \n  slice_sample(n = 10000)\n\nggplot(tips_sample, aes(x = percent_tip, fill = DOBorough)) +\n  geom_density(alpha = 0.5) +\n  labs(title = \"Density of Tip Percentages by Drop-off Borough\",\n       x = \"Tip Percentage (%)\",\n       y = \"Density\") +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\nThe majority of trips cover shorter distances (less than 10 miles) and cluster around tip percentages between 10% and 20%, regardless of the borough. However, a few outliers show higher tip percentages exceeding 50%, especially for shorter trips. For longer trips (over 20 miles), tip percentages tend to stabilize or decrease. This suggests that tipping behavior is more variable for shorter trips but converges to a narrower range for longer trips. In addition, many riders tend to tip in standard percentages, such as 20%, as evidenced by the horizontal lines at these tipping levels across various trip distances.\n\n\nCode\ntips_sample &lt;- tips |&gt; \n  slice_sample(n = 10000) |&gt; \n  filter(trip_distance &lt; 500)\n\nggplot(tips_sample, aes(x = trip_distance, y = percent_tip, color = DOBorough)) +\n  geom_point(alpha = 0.5) +\n  labs(title = \"Tip Percentage vs. Trip Distance\",\n       x = \"Trip Distance (miles)\",\n       y = \"Tip Percentage (%)\") +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\nTipping percentages for most boroughs are concentrated between 10% and 15%, except for notable outliers like the Bronx and “Unknown” which have variable average tipping percentages across different months. Seasonal trends are not strongly evident, but some boroughs like EWR and “Unknown” exhibit peak months, possibly tied to specific events or conditions.\n\n\nCode\ntips_sample &lt;- tips |&gt; \n  filter(trip_distance &lt; 500) |&gt; \n  group_by(PUMonth) |&gt; \n  slice_sample(n = 700) |&gt;\n  ungroup()\n\naverage_tips &lt;- tips_sample |&gt; \n  group_by(PUMonth, DOBorough) |&gt; \n  summarize(avg_tip_percent = mean(percent_tip, na.rm = TRUE), .groups = \"drop\")\n\nggplot(average_tips, aes(x = PUMonth, y = avg_tip_percent, color = DOBorough, group = DOBorough)) +\n  geom_line(size = 1) +\n  geom_point() +\n  labs(title = \"Average Tip Percentage by Month and Borough\",\n       x = \"Month\",\n       y = \"Average Tip Percentage (%)\",\n       color = \"Drop-off Borough\") +\n  scale_x_discrete(limits = c(\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\")) +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Results</span>"
    ]
  }
]